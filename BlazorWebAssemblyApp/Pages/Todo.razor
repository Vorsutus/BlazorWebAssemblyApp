@page "/todo"

<!--Show a count of the number of todo items that aren't complete (IsDone is false).-->
<h3>Todo (@todos.Count(todo => !todo.IsDone))</h3>

<!--The unordered list markup and a foreach loop render each todo item as a list item (<li>). -->
<ul>
    @foreach (var todo in todos)
    {
        //regular bulleted title only
        //<li>@todo.Title</li>

        //bound bulleted Title and Checkbox
    <li>
        <!--Adding in a checkbox set to false initially-->
        <input type="checkbox" @bind="todo.IsDone" />
        <input @bind="todo.Title" />
    </li>

    }
</ul>

<!--The app requires UI elements for adding todo items to the list.-->
<input placeholder="Something todo" @bind="newTodo" />
<!--onClick is an event handler for when the button is pressed-->
<button @onclick="AddTodo">Add todo</button>

@code {
    //The Todo component uses this field to maintain the state of the todo list.
    private IList<TodoItem> todos = new List<TodoItem>();
    private string newTodo;

    private void AddTodo()
    {
        //if the todo string is valid...
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            //add it to the todos IList with the title newTodo we bind to the newTodo string
            todos.Add(new TodoItem { Title = newTodo });
            //Empty the string for newTodo again
            newTodo = string.Empty;
        }
    }
}
